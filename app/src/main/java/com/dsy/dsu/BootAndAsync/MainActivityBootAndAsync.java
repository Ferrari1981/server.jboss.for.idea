package com.dsy.dsu.BootAndAsync;import android.Manifest;import android.app.Activity;import android.content.ComponentName;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.ServiceConnection;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.content.pm.PackageManager;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.graphics.PorterDuff;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.os.Looper;import android.os.Message;import android.util.Log;import android.view.Gravity;import android.view.MenuItem;import android.view.View;import android.view.WindowManager;import android.widget.ProgressBar;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.drawerlayout.widget.DrawerLayout;import androidx.loader.content.AsyncTaskLoader;import androidx.loader.content.Loader;import com.dsy.dsu.AllDatabases.CREATE_DATABASE;import com.dsy.dsu.Business_logic_Only_Class.Class_Connections_Server;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.DATE.SubClassCursorLoader;import com.dsy.dsu.Business_logic_Only_Class.PUBLIC_CONTENT;import com.dsy.dsu.Code_For_Services.ServiceUpdatePoОбновлениеПО;import com.dsy.dsu.Code_For_Services.Service_For_Remote_Async_Binary;import com.dsy.dsu.Dashboard.MainActivity_Dashboard;import com.dsy.dsu.For_Code_Settings_DSU1.MainActivity_Errors;import com.dsy.dsu.For_Code_Settings_DSU1.MainActivity_Tabels_Users_And_Passwords;import com.dsy.dsu.R;import com.google.android.material.navigation.NavigationView;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Locale;import java.util.Random;import java.util.TimeZone;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;public class MainActivityBootAndAsync extends AppCompatActivity  {    private   Date ДатаДляИзмененияВерсииДанныхНаАндройде;    private  ProgressBar progressbarbootandasync;    private Integer ПолученныйПубличныйID = 0;    private  Boolean СтатусБлокировкиПользотеляТекущего =true;    private  CREATE_DATABASE Create_Database_СсылкаНАБазовыйКласс;    private  Activity activity;    private  String РежимПерваяЗапускПослеPasswordИлиПовторная = new String();    private   PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков = null;    private DrawerLayout drawerLayoutAsync;    private NavigationView navigationViewAsyncApp;    private SharedPreferences preferences;    private ServiceUpdatePoОбновлениеПО.localBinderОбновлениеПО localBinderОбновлениеПО;//TODO нова    private    ServiceConnection serviceConnectionAsync;    private  Handler handlerAsync;    private  Handler handlerUpdatePO;    private Service_For_Remote_Async_Binary.LocalBinderAsync localBinderAsync;//TODO нова    private    ServiceConnection connectionОбновлениеПО;    Boolean         ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна=false;    public static final int CAMERA_PERSSION_CODE=1;    private  LogicBinessMainActivity_From_Face_Start logicBinessMainActivity_from_face_start;    private  BusinessLogicActivityBootAndAsync businessLogicActivityBootAndAsync;    private        boolean   СтатусРаботыСервера =false;    private    AsyncTaskLoader<Boolean> asyncTaskLoaderAsync;    private boolean ФлагБылиИлиНЕбылПоворотЭкрана=false;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main_bootandasync_prograssbar);            getSupportActionBar().hide(); ///скрывать тул бар            // TODO: 14.08.2023 вызов кода ПОльзовательский            // TODO: 24.02.2022  создаем фаЙЛ дЛЯ оШИБОК            new Class_Generation_Errors(getApplicationContext()).методСозданиеФайлаДляОшибки();//            Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            activity =this;            businessLogicActivityBootAndAsync=new BusinessLogicActivityBootAndAsync();            logicBinessMainActivity_from_face_start=new LogicBinessMainActivity_From_Face_Start();            // TODO: 14.08.2023  ЗАПУСКАЕМ ПОЛЬЗОВТЕЛЬСКИЙ КОД                                                            // TODO: 14.08.2023 методЗапукска Синхрониазйиии            методЗапускаОбновлениеПоиСинхрониазции( );           // businessLogicActivityBootAndAsync.   МетодСитемныйНастройкиЭкран();            logicBinessMainActivity_from_face_start.     методДаемПраваНаCameraPermissions(activity);            businessLogicActivityBootAndAsync.     МетодИнициализацияMessager();            businessLogicActivityBootAndAsync.      МетодИнициализацияОбновленеиПО();            preferences = getSharedPreferences("sharedPreferencesХранилище", Context.MODE_MULTI_PROCESS);            РежимПерваяЗапускПослеPasswordИлиПовторная = preferences.getString("РежимЗапускаСинхронизации","СамыйПервыйЗапускСинхронизации");            progressbarbootandasync =(ProgressBar) findViewById(R.id.progressbarbootandasync); /////КНОПКА ТАБЕЛЬНОГО УЧЕТА/            Drawable progressDrawable = progressbarbootandasync.getProgressDrawable().mutate();            progressDrawable.setColorFilter(Color.parseColor("#00574B"), android.graphics.PorterDuff.Mode.SRC_IN);            progressbarbootandasync.setProgressDrawable(progressDrawable);            navigationViewAsyncApp    = (NavigationView) findViewById(R.id.navigator_asyncapp); /////КНОПКА ТАБЕЛЬНОГО УЧЕТА            drawerLayoutAsync = (DrawerLayout) findViewById(R.id.drawerLayout_async_prograsser); /////КНОПКА ТАБЕЛЬНОГО УЧЕТА            drawerLayoutAsync.setBackgroundColor(Color.WHITE);         //TODO устанвливает цвета            drawerLayoutAsync.setDrawingCacheBackgroundColor(Color.RED);//todo                        // TODO: 25.03.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber());        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 17.08.2023  запуск обновленея ПО и синхрониазции    private void методЗапускаОбновлениеПоиСинхрониазции() {        try{            if (  ФлагБылиИлиНЕбылПоворотЭкрана==false ){                businessLogicActivityBootAndAsync.    МетодБиндингаRemoteAsync( );            }            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber()+                    " ФлагБылиИлиНЕбылПоворотЭкрана "                    + ФлагБылиИлиНЕбылПоворотЭкрана);        // TODO: 25.03.2023        Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                " line " + Thread.currentThread().getStackTrace()[2].getLineNumber());    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                + Thread.currentThread().getStackTrace()[2].getLineNumber());        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    protected void onStop() {        super.onStop();        try{            Log.d(this.getClass().getName(), "\n" + " class " +                    Thread.currentThread().getStackTrace()[2].getClassName()                    + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onDestroy() {        super.onDestroy();        try{            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onRestart() {        super.onRestart();        try {            Log.d(getApplicationContext().getClass().getName(), "\n"                    + " время: " + new Date() + "\n+" +                    " Класс в процессе... " + this.getClass().getName() + "\n" +                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                    + "   starting... onRestart"+ " starting... onRestart");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber()  );        }    }    @Override    protected void onStart() {        super.onStart();//////TODO ловим поворот экрана  ДЛЯ СИНХРОНИЗАЦИИ        try{            businessLogicActivityBootAndAsync.   МетодДляСлушательБоковойПанелиAsyncApp();            businessLogicActivityBootAndAsync. МетодБоковаяПанельОткрытьЗАкрыть();            // TODO: 14.08.2023  Запускаем Код До Сиинхрониазщции            logicBinessMainActivity_from_face_start. МетодОпределениеКогдаПоследнийРазЗаходилПользователь();            Log.d(getApplicationContext().getClass().getName(), "\n"                    + " время: " + new Date() + "\n+" +                    " Класс в процессе... " + this.getClass().getName() + "\n" +                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()+ "\n");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onResume() {        super.onResume();        try{        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 26.10.2022 сохраняет данные    protected void onSaveInstanceState(Bundle outState) {        try{            Log.i(this.getClass().getName(), "onSaveInstanceState ");            outState.putInt("progressBar4Cycle",   progressbarbootandasync.getProgress());            outState.putInt("progressBar4CycleMAx",   progressbarbootandasync.getMax());            // TODO: 23.08.203 статуст поворта экрана            outState.putBoolean("asyncTaskLoaderAsync.isStarted()", ФлагБылиИлиНЕбылПоворотЭкрана  );            Log.d(getApplicationContext().getClass().getName(), "\n"                    + " время: " + new Date() + "\n+" +                    " Класс в процессе... " + this.getClass().getName() + "\n" +                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()+ "\n"+                    "  ФлагБылиИлиНЕбылПоворотЭкрана " +ФлагБылиИлиНЕбылПоворотЭкрана);            super.onSaveInstanceState(outState);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 26.10.2022 воставливает данные    protected void onRestoreInstanceState(Bundle savedInstanceState) {        super.onRestoreInstanceState(savedInstanceState);        try {           // businessLogicActivityBootAndAsync.   МетодСитемныйНастройкиЭкран();            // TODO: 25.10.2022 востанавливаем данных после поворота экрана            businessLogicActivityBootAndAsync.    МетодВостановлениеЭкранаПослеПоворота(  savedInstanceState);            Log.d(getApplicationContext().getClass().getName(), "\n"                    + " время: " + new Date() + "\n+" +                    " Класс в процессе... " + this.getClass().getName() + "\n" +                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()+ "\n"  + " onRestoreInstanceState");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    public void onBackPressed()    {        //thats it    }    // TODO: 14.08.2023 НАЧИАЕМ БИЗНЕС ЛОГИКУ Активти BootAndAsync    // TODO: 14.08.2023 НАЧИАЕМ БИЗНЕС ЛОГИКУ Активти BootAndAsync    // TODO: 14.08.2023 НАЧИАЕМ БИЗНЕС ЛОГИКУ Активти BootAndAsync    // TODO: 14.08.2023 НАЧИАЕМ БИЗНЕС ЛОГИКУ Активти BootAndAsync   // TODO: 14.08.2023 НАЧИАЕМ БИЗНЕС ЛОГИКУ Активти BootAndAsync   // TODO: 14.08.2023 НАЧИАЕМ БИЗНЕС ЛОГИКУ Активти BootAndAsync    class BusinessLogicActivityBootAndAsync {        private void МетодСитемныйНастройкиЭкран() {            try{            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            //////todo настрока экрана            getWindow().getDecorView().setSystemUiVisibility(                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION                            | View.SYSTEM_UI_FLAG_FULLSCREEN                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);            getSupportActionBar().setHomeButtonEnabled(false);            getSupportActionBar().setDisplayHomeAsUpEnabled(false);            getSupportActionBar().setHomeAsUpIndicator(null);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            ((Activity) activity) .setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            ((Activity) activity).setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            ((Activity) activity) .setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            // TODO: 25.03.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber());        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }        }        private void МетодБиндингаRemoteAsync( ) {            try {                // TODO: 28.04.2023  запускаем Гланвную Синхрониазцию                //  Intent intentОбноразоваяСинхронизациия = new Intent(getApplicationContext(), Service_For_Remote_Async.class);                Intent intentОбноразоваяСинхронизациия = new Intent(getApplicationContext(), Service_For_Remote_Async_Binary.class);                intentОбноразоваяСинхронизациия.setAction("com.StartingAsyncMainBackgroud");                serviceConnectionAsync=     new ServiceConnection() {                    @Override                    public void onServiceConnected(ComponentName name, IBinder service) {                        try{                            if (service.isBinderAlive()) {                                    localBinderAsync = (Service_For_Remote_Async_Binary.LocalBinderAsync) service;                                    // TODO: 14.08.2023                                logicBinessMainActivity_from_face_start.    МетодПингаКСереруЗапущенЛиСерерИлиНет();                                businessLogicActivityBootAndAsync. МетодБиндингаОбновлениеПО();                                Log.d(this.getClass().getName(), "\n" + " class " +                                        Thread.currentThread().getStackTrace()[2].getClassName()                                        + "\n" +                                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                        + " localBinderlocalBinderAsync.isBinderAlive()Async " + localBinderAsync.isBinderAlive());                            }                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                    Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                    @Override                    public void onServiceDisconnected(ComponentName name) {                        localBinderAsync =null;                        Log.d(getApplicationContext().getClass().getName().toString(), "\n"                                + "onServiceConnected  одноразовая  messengerActivity  " );                    }                    @Override                    public void onBindingDied(ComponentName name) {                        ServiceConnection.super.onBindingDied(name);                    }                    @Override                    public void onNullBinding(ComponentName name) {                        ServiceConnection.super.onNullBinding(name);                    }                };                Boolean asBoolenCbyСинхронная=       bindService(intentОбноразоваяСинхронизациия, serviceConnectionAsync ,Context.BIND_AUTO_CREATE);                // TODO: 28.04.2023                Log.d(this.getClass().getName(), "\n" + " class " +                        Thread.currentThread().getStackTrace()[2].getClassName()                        + "\n" +                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"  + " asBoolenCbyСинхронная " +asBoolenCbyСинхронная);            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());                Log.d(this.getClass().getName(), "  Полусаем Ошибку e.toString() " + e.toString());            }        }        private void методЗапускаОбновлениеПо() {            try{                localBinderОбновлениеПО.getService().МетодГлавныйОбновленияПО(true,activity,handlerUpdatePO);                Log.i(this.getClass().getName(),  " Атоманически установкаОбновление ПО "+                        Thread.currentThread().getStackTrace()[2].getMethodName()+ " время " +new Date().toLocaleString() );                Log.i(this.getClass().getName(),  "R.id.item_async_updatepo  "                        +Thread.currentThread().getStackTrace()[2].getMethodName()+ " время " +new Date().toLocaleString() );            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        private Boolean методЗапускаОбновлениеПоИзAsync() {            try{                ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна=                        localBinderОбновлениеПО.getService().МетодГлавныйОбновленияПОДоAsync(true,activity,handlerUpdatePO);                Log.i(this.getClass().getName(),  " Атоманически установкаОбновление ПО "+                        Thread.currentThread().getStackTrace()[2].getMethodName()+ " время " +new Date().toLocaleString() );                Log.i(this.getClass().getName(),  "R.id.item_async_updatepo  "                        +Thread.currentThread().getStackTrace()[2].getMethodName()+ " время " +new Date().toLocaleString() +                        "ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна " +ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна);            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }            return  ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна;        }        private void МетодВостановлениеЭкранаПослеПоворота(@NonNull Bundle savedInstanceState) {            try{                if(progressbarbootandasync.isAttachedToWindow()){                    progressbarbootandasync.setProgress(    savedInstanceState.getInt("progressBar4Cycle",   progressbarbootandasync.getProgress()));                    progressbarbootandasync.setMax(   savedInstanceState.getInt("progressBar4CycleMAx",   progressbarbootandasync.getMax()));                    // TODO: 23.08.2023  Востаноавливем статус поврот экрана                    ФлагБылиИлиНЕбылПоворотЭкрана=    savedInstanceState.getBoolean("asyncTaskLoaderAsync.isStarted()" );                    progressbarbootandasync.requestLayout();                    drawerLayoutAsync.refreshDrawableState();                    Log.d(getApplicationContext().getClass().getName(), "\n"                            + " время: " + new Date() + "\n+" +                            " Класс в процессе... " + this.getClass().getName() + "\n" +                            " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                            + "   savedInstanceState "+savedInstanceState  + " ФлагБылиИлиНЕбылПоворотЭкрана " +ФлагБылиИлиНЕбылПоворотЭкрана);                }            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        protected Integer МетодЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму() {            Integer Результат_АдаптерДляДобавлениеПолученогоУспешноИмяиПарольДляСемидневнойАунтификации=0;            try{                ContentValues КонтейнерДляЗаписисВТалицуSuccessПриУспешнойСинхрониазцииПоказываетЧСТоПользовательЗаходил = new ContentValues();                Date Дата = Calendar.getInstance().getTime();                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", new Locale("ru"));//"yyyy-MM-dd HH:mm:ss.SSS"//"yyyy-MM-dd'T'HH:mm:ss'Z'"                dateFormat.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));                Log.d(this.getClass().getName(), " ГЛАВНАЯ ДАТА ПРОГРАММЫ ДСУ-1 : " + dateFormat.format(Дата));                String ДатаДляПоказываетУспешнойСинхрониазцииЧтоПользовательЗаходилВпрограмму = dateFormat.format(Дата);                КонтейнерДляЗаписисВТалицуSuccessПриУспешнойСинхрониазцииПоказываетЧСТоПользовательЗаходил.put("date_update", ДатаДляПоказываетУспешнойСинхрониазцииЧтоПользовательЗаходилВпрограмму);                Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ= new Class_GRUD_SQL_Operations(getApplicationContext());                class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ.concurrentHashMapНабор.put("СамFreeSQLКОд",                        " SELECT id  FROM successlogin  ORDER BY date_update DESC ;");                // TODO: 12.10.2021  Ссылка Менеджер Потоков                if ( ПолученныйПубличныйID>0) {                    Class_GRUD_SQL_Operations class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму = new Class_GRUD_SQL_Operations(getApplicationContext());                    class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.                            concurrentHashMapНабор.put("НазваниеОбрабоатываемойТаблицы", "SuccessLogin");                    class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.                            concurrentHashMapНабор.put("Флаг_ЧерезКакоеПолеОбновлением", "id");                    class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.                            concurrentHashMapНабор.put("ЗначениеФлагОбновления", ПолученныйПубличныйID);                    class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.                            concurrentHashMapНабор.put("ЗнакФлагОбновления", "=");                    class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.                            contentValuesДляSQLBuilder_Для_GRUD_Операций.putAll(КонтейнерДляЗаписисВТалицуSuccessПриУспешнойСинхрониазцииПоказываетЧСТоПользовательЗаходил);                    // TODO: 14.08.2023 Запись когда Пользователь Усепшно зашел в Приложение                    Результат_АдаптерДляДобавлениеПолученогоУспешноИмяиПарольДляСемидневнойАунтификации = (Integer) class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.                            new UpdateData(getApplicationContext()).updatedata(class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.concurrentHashMapНабор,                            class_grud_sql_operationsЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму.contentValuesДляSQLBuilder_Для_GRUD_Операций,                            new PUBLIC_CONTENT(getApplicationContext()).МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                    Log.d(this.getClass().getName(), " Результат_АдаптерДляДобавлениеПолученогоУспешноИмяиПарольДляСемидневнойАунтификации"                            + Результат_АдаптерДляДобавлениеПолученогоУспешноИмяиПарольДляСемидневнойАунтификации);                }            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }            return  Результат_АдаптерДляДобавлениеПолученогоУспешноИмяиПарольДляСемидневнойАунтификации;        }        void МетодПоказываетЗаблокированЛИПользовательИЛИнетСтатусОтСервера() throws ExecutionException, InterruptedException {            try {                Bundle bundleПосикЗаблокированыхСтатусПолльзователя=new Bundle();                bundleПосикЗаблокированыхСтатусПолльзователя.putString("СамЗапрос","   SELECT locked  FROM chat_users  WHERE _id= "+ПолученныйПубличныйID+"  ORDER BY date_update DESC ;  ");                bundleПосикЗаблокированыхСтатусПолльзователя.putStringArray("УсловияВыборки" ,new String[]{});                bundleПосикЗаблокированыхСтатусПолльзователя.putString("Таблица","locked");                Cursor суксорЗаблокированыхПользотель=                        (Cursor)    new SubClassCursorLoader(). CursorLoaders(getApplicationContext(), bundleПосикЗаблокированыхСтатусПолльзователя);                Log.d(this.getClass().getName(), "суксорЗаблокированыхПользотель "+суксорЗаблокированыхПользотель  );                if ( суксорЗаблокированыхПользотель.getCount()>0 ){                    СтатусБлокировкиПользотеляТекущего = Boolean.parseBoolean(суксорЗаблокированыхПользотель.getString(0))        ;                }                if ( суксорЗаблокированыхПользотель!=null ){                    суксорЗаблокированыхПользотель.close();                }                // TODO: 28.07.2022                Log.d(this.getClass().getName(), " СтатусБлокировкиПользотеляТекущего " + СтатусБлокировкиПользотеляТекущего);            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        void МетодДоНачалаСинхрониазцииExecutor() {            try{                ДатаДляИзмененияВерсииДанныхНаАндройде = Calendar.getInstance().getTime();                Log.d(this.getClass().getName(), " onStartLoading() начало метода  ");            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        // TODO: 02.09.2021  метод Визуализация        private void МетодИнициализацияMessager() {            try{handlerAsync=new Handler(Looper.getMainLooper()){    @Override    public void handleMessage(@NonNull Message msg) {        super.handleMessage(msg);    }    @Override    public void dispatchMessage(@NonNull Message msg) {        super.dispatchMessage(msg);        try {            Bundle bundleCallsBackAsynsService=msg.getData();            switch (msg.what){                case 2:// процеессе                    МетодВизуализацииСинхронизации(bundleCallsBackAsynsService);                    break;            }            progressbarbootandasync.requestLayout();            progressbarbootandasync.refreshDrawableState();            Log.d(this.getClass().getName(), "\n" + " class " +                    Thread.currentThread().getStackTrace()[2].getClassName()                    + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " msg.what " +msg.what  + "bundleCallsBackAsynsService "+bundleCallsBackAsynsService);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }};                Log.i(getApplicationContext().getClass().getName(),  " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"  );            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        // TODO: 02.09.2021  метод Визуализация        private void МетодИнициализацияОбновленеиПО() {            try{                handlerUpdatePO=new Handler(Looper.getMainLooper()){                    @Override                    public void handleMessage(@NonNull Message msg) {                        super.handleMessage(msg);                    }                    @Override                    public void dispatchMessage(@NonNull Message msg) {                        super.dispatchMessage(msg);                        try {                            Bundle bundleCallsBackAsynsService=msg.getData();                            Log.d(this.getClass().getName(), "\n" + " class " +                                    Thread.currentThread().getStackTrace()[2].getClassName()                                    + "\n" +                                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                    + " msg.what " +msg.what  + "bundleCallsBackAsynsService "+bundleCallsBackAsynsService);                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                    Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                };                Log.i(getApplicationContext().getClass().getName(),  " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"  );            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        private void МетодВизуализацииСинхронизации( @NonNull  Bundle bundleCallsBackAsynsService) {            try{                    if (   progressbarbootandasync.isAttachedToWindow()) {                        Integer ПроцентыNew = bundleCallsBackAsynsService.getInt( "Проценны", 0);                        String ИмяТаблица = bundleCallsBackAsynsService.getString("имятаблицы", "");                        Integer MaxКоличествоСТрочеек = bundleCallsBackAsynsService.getInt("maxtables", 0);                        Integer CurrentPotionСТрочеек = bundleCallsBackAsynsService.getInt("currentposition", 0);                        if(CurrentPotionСТрочеек>0){                            progressbarbootandasync.setIndeterminate(false);                        }                        progressbarbootandasync.setMax(MaxКоличествоСТрочеек);                        CurrentPotionСТрочеек=CurrentPotionСТрочеек+1;                        if (CurrentPotionСТрочеек>= progressbarbootandasync.getProgress()) {                            progressbarbootandasync.setProgress(CurrentPotionСТрочеек,true);                            progressbarbootandasync.setProgressTintMode(PorterDuff.Mode.DARKEN);                            // TODO: 14.08.2023                            Integer secondaryProgres=CurrentPotionСТрочеек;                            secondaryProgres++;                            secondaryProgres++;                            progressbarbootandasync.setSecondaryProgress(secondaryProgres);                            progressbarbootandasync.setSecondaryProgressTintMode(PorterDuff.Mode.DARKEN);                                                  }                        Log.d(this.getClass().getName(), "\n" + " class " +                                Thread.currentThread().getStackTrace()[2].getClassName()                                + "\n" +                                " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                + " progressbarbootandasync" + progressbarbootandasync.getProgress());                    }            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        private void МетодБоковаяПанельОткрытьЗАкрыть() {            try {                if (drawerLayoutAsync.isDrawerOpen(Gravity.LEFT)) {                    drawerLayoutAsync.closeDrawer(Gravity.LEFT);                }            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        // TODO: 03.04.2022        private void МетодДляСлушательБоковойПанелиAsyncApp() {            // TODO: 06.04.2022            try {                drawerLayoutAsync.addDrawerListener(new DrawerLayout.SimpleDrawerListener() {                    @Override                    public void onDrawerOpened(View drawerView) {                        Drawable drawable = getResources().getDrawable(R.mipmap.icon_dsu1_for_asyncapp_close_naviga);///                        navigationViewAsyncApp.setVisibility(View.VISIBLE);                        super.onDrawerOpened(drawerView);                    }                    @Override                    public void onDrawerClosed(View drawerView) {                        Drawable drawable = getResources().getDrawable(R.drawable.icon_dsu1_async_asynprograssbar);///                        navigationViewAsyncApp.setVisibility(View.GONE);                        super.onDrawerClosed(drawerView);                    }                });                navigationViewAsyncApp.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {                    @Override                    public boolean onNavigationItemSelected(@NonNull MenuItem item) {                        switch (item.getItemId()) {                            // TODO: 06.04.2022 Запускаем ОШибки                            case R.id.one:                                item.setChecked(true);                                Log.w(getPackageName().getClass().getName(), "item.getItemId() Посмотреть ошибки   " + item.getItemId() + "\n");//////////                                try {                                    Intent Интент_Меню = new Intent(getApplication(), MainActivity_Errors.class);                                    Интент_Меню.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);//////FLAG_ACTIVITY_SINGLE_TOP                                    Log.d(this.getClass().getName(), "" + "case R.id.ПунктМенюПервый:");                                    startActivity(Интент_Меню);                                    Log.i(this.getClass().getName(),  "R.id.one "+Thread.currentThread().getStackTrace()[2].getMethodName()+ " время " +new Date().toLocaleString() );                                } catch (Exception e) {                                    e.printStackTrace();                                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                            + Thread.currentThread().getStackTrace()[2].getLineNumber());                                    new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                            Thread.currentThread().getStackTrace()[2].getLineNumber());                                }                                break;                            // TODO: 06.04.2022 ЗапускаемОбновление ПО                            case R.id.item_async_updatepo:                                item.setChecked(true);                                try {// TODO: 10.07.2023  запуск обновление ПО                                    методЗапускаОбновлениеПо();                                    Log.i(this.getClass().getName(),  " Атоманически установкаОбновление ПО "+ Thread.currentThread().getStackTrace()[2].getMethodName()+ " время " +new Date().toLocaleString() );                                    Log.w(getPackageName().getClass().getName(), "item.getItemId() Посмотреть ошибки   " + item.getItemId() + "\n");//////////                                    Log.i(this.getClass().getName(),  "R.id.item_async_updatepo  "+Thread.currentThread().getStackTrace()[2].getMethodName()+ " время " +new Date().toLocaleString() );                                } catch (Exception e) {                                    e.printStackTrace();                                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                            + Thread.currentThread().getStackTrace()[2].getLineNumber());                                    new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                            Thread.currentThread().getStackTrace()[2].getLineNumber());                                }                                break;                        }                        if (drawerLayoutAsync.isDrawerOpen(Gravity.LEFT)) {                            drawerLayoutAsync.closeDrawer(Gravity.LEFT);                        }                        return true;                    }                });            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }            // TODO: 04.04.2022        }        private void МетодПослеСинхрониазцииЗапускаемИОцениваемПользователя()        {            try{                PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков=new PUBLIC_CONTENT(getApplicationContext());                Class_GRUD_SQL_Operations class_grud_sql_operations = new Class_GRUD_SQL_Operations(getApplicationContext());                class_grud_sql_operations.concurrentHashMapНабор.put("СамFreeSQLКОд",                        " SELECT id  FROM successlogin  ORDER BY date_update DESC ;");                // TODO: 12.10.2021  Ссылка Менеджер Потоков                SQLiteCursor Курсор_ПолучаемПубличныйID = null;                Курсор_ПолучаемПубличныйID = (SQLiteCursor) class_grud_sql_operations.                        new GetаFreeData(getApplicationContext()).getfreedata(class_grud_sql_operations.                                concurrentHashMapНабор,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков, new CREATE_DATABASE(getApplicationContext()).getССылкаНаСозданнуюБазу());                if (                        Курсор_ПолучаемПубличныйID.getCount() > 0) {                    Курсор_ПолучаемПубличныйID.moveToFirst();                    ПолученныйПубличныйID = Курсор_ПолучаемПубличныйID.getInt(0);                    Log.d(this.getClass().getName(), " ПолученныйПубличныйID  " + ПолученныйПубличныйID);                }                if(Курсор_ПолучаемПубличныйID!=null){                    Курсор_ПолучаемПубличныйID.close();                }            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        private void методЗапускFaceAppAfterAsync() {            try{                Intent ИнтентДляЗапускаДляВизуализацииСинхронизации=new Intent();                ИнтентДляЗапускаДляВизуализацииСинхронизации.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP );                if(СтатусБлокировкиПользотеляТекущего ==false) {                    /*ИнтентДляЗапускаДляВизуализацииСинхронизации = new Intent(activity, MainActivity_Face_App_OLd.class);                    ИнтентДляЗапускаДляВизуализацииСинхронизации.setAction("MainActivity_Face_App_OLd.class");*/                    ИнтентДляЗапускаДляВизуализацииСинхронизации = new Intent(activity, MainActivity_Dashboard.class);                    ИнтентДляЗапускаДляВизуализацииСинхронизации.setAction("MainActivity_Dashboard.class");                    Log.d(getApplicationContext().getClass().getName(), "\n"                            + " время: " + new Date() + "\n+" +                            " Класс в процессе... " + this.getClass().getName() + "\n" +                            " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                            + "    СтатусБлокировкиПользотеляТекущего) "+СтатусБлокировкиПользотеляТекущего);                }else{                    // TODO: 14.10.2021  когда пользователь временно заблокирован                    // TODO: 14.10.2021  когда пользователь временно заблокирова                    ИнтентДляЗапускаДляВизуализацииСинхронизации= new Intent(activity, MainActivity_Tabels_Users_And_Passwords.class);                    ИнтентДляЗапускаДляВизуализацииСинхронизации.setAction("MainActivity_Tabels_Users_And_Passwords.class");                    Toast.makeText(getApplicationContext(), "  Вы заблокированны обратитесь к Администатору ПО !!! " , Toast.LENGTH_LONG).show();                    Log.d(getApplicationContext().getClass().getName(), "\n"                            + " время: " + new Date() + "\n+" +                            " Класс в процессе... " + this.getClass().getName() + "\n" +                            " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                            + "  Вы заблокированны обратитесь к Администатору ПО !!! " + " СтатусБлокировкиПользотеляТекущего " +СтатусБлокировкиПользотеляТекущего);                }                SharedPreferences.Editor editor = preferences.edit();                editor.putString("РежимЗапускаСинхронизации","ПовторныйЗапускСинхронизации");                editor.putInt("PublicId",ПолученныйПубличныйID);                editor.commit();                // TODO: 14.08.2023                startActivity(ИнтентДляЗапускаДляВизуализацииСинхронизации);                finishAfterTransition();            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        private void МетодБиндингаОбновлениеПО() {            try {                connectionОбновлениеПО = new ServiceConnection() {                    @Override                    public void onServiceConnected(ComponentName name, IBinder service) {                        try {                            if (service.isBinderAlive()) {                                // TODO: 28.07.2023  Update                                localBinderОбновлениеПО = (ServiceUpdatePoОбновлениеПО.localBinderОбновлениеПО) service;                                // TODO: 16.12.2021 НЕПОСРЕДСТВЕННЫЙ ПИНГ СИСТЕНМ ИНТРЕНАТ НА НАЛИЧЕНИ СВАЗИ С БАЗОЙ SQL SERVER                                logicBinessMainActivity_from_face_start.методЗапускаAsyncПоРезультатамДат( );                            }                            Log.d(getApplicationContext().getClass().getName(), "\n"                                    + " время: " + new Date() + "\n+" +                                    " Класс в процессе... " + this.getClass().getName() + "\n" +                                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()+ "\n"                                    +  "localBinderОбновлениеПО " +localBinderОбновлениеПО);                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                    this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                    @Override                    public void onServiceDisconnected(ComponentName name) {                        try {                            localBinderОбновлениеПО=null;                            Log.i(getApplicationContext().getClass().getName(), "    onServiceDisconnected  binder.isBinderAlive()");                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                    this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                };                Intent intentЗапускСлужбыОбновлениеПО = new Intent(getApplicationContext(), ServiceUpdatePoОбновлениеПО.class);                intentЗапускСлужбыОбновлениеПО.setAction("com.ServiceUpdatePoОбновлениеПО");                Boolean asBoolenОбновлениеПО=         bindService(intentЗапускСлужбыОбновлениеПО , connectionОбновлениеПО,  Context.BIND_AUTO_CREATE );                // TODO: 28.04.2023                Log.d(this.getClass().getName(), "\n" + " class " +                        Thread.currentThread().getStackTrace()[2].getClassName()                        + "\n" +                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"  + " asBoolenОбновлениеПО " +asBoolenОбновлениеПО);            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());                Log.d(this.getClass().getName(), "  Полусаем Ошибку e.toString() " + e.toString());            }        }        private void методStartingAsynTaskLoaderForAsync() {            try{               asyncTaskLoaderAsync=new AsyncTaskLoader<Boolean>(activity) {                    @Override                    protected void onStartLoading() {                        super.onStartLoading();                        try{                            ФлагБылиИлиНЕбылПоворотЭкрана=asyncTaskLoaderAsync.isStarted();                            Log.i(getApplicationContext().getClass().getName(), "    onServiceConnected  service)"                                    + localBinderОбновлениеПО.isBinderAlive());                            // TODO: 10.07.2023  запукскаем синхрониазцуию                            ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна=          методЗапускаОбновлениеПоИзAsync();                            Log.i(getApplicationContext().getClass().getName(), "    onServiceConnected  service)"                                    + localBinderОбновлениеПО.isBinderAlive()+ " ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна "+ ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна);                            if (ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна==false) {                                cancelLoadInBackground();                            }else {                                forceLoad();                            }                            Log.d(getApplicationContext().getClass().getName(), "\n"                                    + " время: " + new Date() + "\n+" +                                    " Класс в процессе... " + this.getClass().getName() + "\n" +                                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                    + " localBinderОбновлениеПО.isBinderAlive() " + localBinderОбновлениеПО.isBinderAlive());                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                    this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                    @Override                    public void cancelLoadInBackground() {                        super.cancelLoadInBackground();                        try{                            // TODO: 28.07.2023 выключаем                            abandon();                            Log.d(getApplicationContext().getClass().getName(), "\n"                                    + " время: " + new Date() + "\n+" +                                    " Класс в процессе... " + this.getClass().getName() + "\n" +                                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                    + " localBinderОбновлениеПО.isBinderAlive() " + localBinderОбновлениеПО.isBinderAlive());                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                    this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                    @Nullable                    @Override                    public Boolean loadInBackground() {                        try{                            Service_For_Remote_Async_Binary service_for_remote_async_binary=      localBinderAsync.getService();                            // TODO: 03.08.2023 запускаем получение ключа                            service_for_remote_async_binary.  МетодРегистрацииУстройсвоНАFirebaseAndOneSignal();                            // TODO: 18.05.2023  Главная Строчка Запуск Синхрниазциии                            Integer       ФинальныйРезультатAsyncBackgroud=    service_for_remote_async_binary.metodStartingSync(activity,handlerAsync );                            Log.d(getApplicationContext().getClass().getName(), "\n"                                    + " время: " + new Date() + "\n+" +                                    " Класс в процессе... " + this.getClass().getName() + "\n" +                                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                    + " localBinderОбновлениеПО.isBinderAlive() " + localBinderОбновлениеПО.isBinderAlive()  +                                    " ФинальныйРезультатAsyncBackgroud " +ФинальныйРезультатAsyncBackgroud);                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                    this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                        return ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна;                    }                };                asyncTaskLoaderAsync.startLoading();                asyncTaskLoaderAsync.registerListener(new Random().nextInt(), new Loader.OnLoadCompleteListener<Boolean>() {                    @Override                    public void onLoadComplete(@NonNull Loader<Boolean> loader, @Nullable Boolean ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна) {                        // TODO: 28.07.2023 метод после сихрониазции                        try{                            // TODO: 28.04.2023 выключаем службу                            методUnBindingСлужбыОбновления();                            // TODO: 27.10.2022  МетодАнализа Заблокирован или Нет пользователь и запуск Программы                            МетодПослеСинхрониазцииЗапускаемИОцениваемПользователя();                            МетодПоказываетЗаблокированЛИПользовательИЛИнетСтатусОтСервера();                            МетодЗАписываетНовуюДатуКогдаКлиентУспешноЗАходилВПрорамму();                            методЗапускFaceAppAfterAsync();                            Log.d(getApplicationContext().getClass().getName(), "\n"                                    + " время: " + new Date() + "\n+" +                                    " Класс в процессе... " + this.getClass().getName() + "\n" +                                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                    + " localBinderОбновлениеПО.isBinderAlive() " + localBinderОбновлениеПО.isBinderAlive()                                    +  "  ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна " +ФлагЗАпускатьСинхронизациюПотосучтоВерсияРавна);                            // TODO: 28.07.2023 exit                            asyncTaskLoaderAsync.abandon();                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                    Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                });            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        //TODO END  BusinessLogicActivityBootAndAsync //TODO END  BusinessLogicActivityBootAndAsync //TODO END  BusinessLogicActivityBootAndAsync //TODO END  BusinessLogicActivityBootAndAsync    }//TODO END  BusinessLogicActivityBootAndAsync //TODO END  BusinessLogicActivityBootAndAsync //TODO END  BusinessLogicActivityBootAndAsync        // TODO: 14.08.2023  НАЧАЛО БИЗНЕС ЛОГИКИ    LogicBinessMainActivity_From_Face_Start // TODO: 14.08.2023  НАЧАЛО БИЗНЕС ЛОГИКИ    LogicBinessMainActivity_From_Face_Start// TODO: 14.08.2023  НАЧАЛО БИЗНЕС ЛОГИКИ    LogicBinessMainActivity_From_Face_Start // TODO: 14.08.2023  НАЧАЛО БИЗНЕС ЛОГИКИ    LogicBinessMainActivity_From_Face_Start  public  class LogicBinessMainActivity_From_Face_Start{      private Integer ФиналПолучаемРазницуМеждуДатами=0;        private  String  success_users ;        private    String  success_login ;        private    String    date_update;        //TODO метод пользовательской дополнительной настройки автозапуса        private void МетодДополнительнойНастрокиАвтоЗапуска() {            try{                final Intent[] AUTO_START_INTENTS = {                        new Intent().setComponent(new ComponentName("com.samsung.android.lool",                                "com.samsung.android.sm.ui.battery.BatteryActivity")),                        new Intent("miui.intent.action.OP_AUTO_START").addCategory(Intent.CATEGORY_DEFAULT),                        new Intent().setComponent(new ComponentName("com.miui.securitycenter", "com.miui.permcenter.autostart.AutoStartManagementActivity")),                        new Intent().setComponent(new ComponentName("com.letv.android.letvsafe", "com.letv.android.letvsafe.AutobootManageActivity")),                        new Intent().setComponent(new ComponentName("com.huawei.systemmanager", "com.huawei.systemmanager.optimize.process.ProtectActivity")),                        new Intent().setComponent(new ComponentName("com.coloros.safecenter", "com.coloros.safecenter.permission.startup.StartupAppListActivity")),                        new Intent().setComponent(new ComponentName("com.coloros.safecenter", "com.coloros.safecenter.startupapp.StartupAppListActivity")),                        new Intent().setComponent(new ComponentName("com.oppo.safe", "com.oppo.safe.permission.startup.StartupAppListActivity")),                        new Intent().setComponent(new ComponentName("com.iqoo.secure", "com.iqoo.secure.ui.phoneoptimize.AddWhiteListActivity")),                        new Intent().setComponent(new ComponentName("com.iqoo.secure", "com.iqoo.secure.ui.phoneoptimize.BgStartUpManager")),                        new Intent().setComponent(new ComponentName("com.vivo.permissionmanager", "com.vivo.permissionmanager.activity.BgStartUpManagerActivity")),                        new Intent().setComponent(new ComponentName("com.asus.mobilemanager", "com.asus.mobilemanager.entry.FunctionActivity")).setData(                                Uri.parse("mobilemanager://function/entry/AutoStart"))                };                for (Intent intent : AUTO_START_INTENTS) {                    if (getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY) != null) {                        startActivity(intent);                        // break;                    }                }            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                // TODO: 01.09.2021 метод вызова                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        public  void методДаемПраваНаCameraPermissions(Activity activity){            if (ContextCompat.checkSelfPermission(activity, Manifest.permission.CAMERA)                    != PackageManager.PERMISSION_GRANTED) {                // Permission is not granted                Log.d("checkCameraPermissions", "No Camera Permissions");                //////////////////////TODO SERVICE                String[] permissions = new String[]{                        Manifest.permission.CAMERA,                        Manifest.permission.RECORD_AUDIO,                        Manifest.permission.INTERNET,                        Manifest.permission.READ_PHONE_STATE,                        Manifest.permission.READ_EXTERNAL_STORAGE,                        Manifest.permission.WRITE_EXTERNAL_STORAGE,                        Manifest.permission.VIBRATE,                        Manifest.permission.RECORD_AUDIO,                        Manifest.permission.RECORD_AUDIO,                        Manifest.permission.REQUEST_INSTALL_PACKAGES,                        Manifest.permission.ACCESS_FINE_LOCATION,                        Manifest.permission.ACCESS_LOCATION_EXTRA_COMMANDS,                        Manifest.permission.MANAGE_EXTERNAL_STORAGE,                        Manifest.permission.ACCESS_BACKGROUND_LOCATION,                        Manifest.permission.ACCESS_NETWORK_STATE,                        Manifest.permission.ACCESS_MEDIA_LOCATION,                        Manifest.permission.INSTALL_PACKAGES,                        Manifest.permission.WRITE_SETTINGS,                        Manifest.permission.WRITE_SECURE_SETTINGS                };                ActivityCompat.requestPermissions(activity, permissions,CAMERA_PERSSION_CODE );            }else{                // Permission is not granted                Log.d("checkCameraPermissions", "Success YRA  Camera Permissions  !!!!");            }        }// TODO: 24.02.2022        private void МетодПингаКСереруЗапущенЛиСерерИлиНет() {            try{                // TODO: 16.12.2021 НЕПОСРЕДСТВЕННЫЙ ПИНГ СИСТЕНМ ИНТРЕНАТ НА НАЛИЧЕНИ СВАЗИ С БАЗОЙ SQL SERVER          СтатусРаботыСервера =                        new Class_Connections_Server(getApplicationContext()).                                МетодПингаСервераРаботаетИлиНет(getApplicationContext());                Log.d(this.getClass().getName(), "  СтатусРаботыСервера " + СтатусРаботыСервера);            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        /////// МЕТОД КОГДА ЗАХОДИЛ ПОСЛЬДНИЙ РАЗ ПОЛЬЗОВАТЛЬ        private void  МетодОпределениеКогдаПоследнийРазЗаходилПользователь()   {            Cursor Курсор_7ДнейЗаходаПользователя = null;            try{                Bundle bundleПосикФИО=new Bundle();                bundleПосикФИО.putString("СамЗапрос","  SELECT *  FROM    successlogin   ORDER BY id  LIMIT   1  ");                bundleПосикФИО.putStringArray("УсловияВыборки" ,new String[]{});                bundleПосикФИО.putString("Таблица","successlogin");                Курсор_7ДнейЗаходаПользователя=                        (Cursor)    new SubClassCursorLoader(). CursorLoaders(getApplicationContext(), bundleПосикФИО);                Log.d(this.getClass().getName(), "Курсор_7ДнейЗаходаПользователя "+Курсор_7ДнейЗаходаПользователя  );                if (Курсор_7ДнейЗаходаПользователя.getCount() > 0) {/////ПРОВЕРЯЕМ ЕСЛИ ПО ДАННОМУ ID UUID ЗАПОЛНЕ ЛИ ОН                    Курсор_7ДнейЗаходаПользователя.moveToFirst();                    success_users =                            Курсор_7ДнейЗаходаПользователя.getString(Курсор_7ДнейЗаходаПользователя.getColumnIndex("success_users")).trim();                    success_login =                            Курсор_7ДнейЗаходаПользователя.getString(Курсор_7ДнейЗаходаПользователя.getColumnIndex("success_login")).trim();                    date_update =                            Курсор_7ДнейЗаходаПользователя.getString(Курсор_7ДнейЗаходаПользователя.getColumnIndex("date_update")).trim();                    Log.d(this.getClass().getName(), "  success_users  " + success_users + "  " +                            "    success_login  " + success_login + " date_update " + date_update);                    // TODO: 13.08.2023 дата из табции                    Date ДатаSucceslogin =                            new android.icu.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS",                                    new Locale("ru")).parse(date_update);//TODO "2023-08-01 19:00:59.781"                    Log.d(this.getClass().getName(), "  ДатаSucceslogin  " + ДатаSucceslogin);                    // TODO: 13.08.2023 Дата NOW !!!!!                    Date ДатаNOW = Calendar.getInstance().getTime();                    DateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", new Locale("ru"));//"yyyy-MM-dd'T'HH:mm:ss'Z'                    String ДатСегодняДатаNOW = dateFormat.format(ДатаNOW);                    Log.d(this.getClass().getName(), "  ДатСегодняДатаNOW  " + ДатСегодняДатаNOW);                    ////TODO само сравнивание дат на 7 дней назад                    long РазницаМеждуДатамиNowИДатыИзБазы =                            ДатаNOW.getTime()                                    - ДатаSucceslogin.getTime(); //локальное сравнение дата из базы андройда и дат сегодня                    ///////////                    ФиналПолучаемРазницуМеждуДатами = Integer.parseInt("" + (TimeUnit.DAYS.convert(РазницаМеждуДатамиNowИДатыИзБазы, TimeUnit.MILLISECONDS)));                    Log.d(this.getClass().getName(), "  ФиналПолучаемРазницуМеждуДатами  " + ФиналПолучаемРазницуМеждуДатами);                }                // TODO: 13.08.2023                if (Курсор_7ДнейЗаходаПользователя!=null) {                    Курсор_7ДнейЗаходаПользователя.close();///                }                Log.d(this.getClass().getName(), "  ФиналПолучаемРазницуМеждуДатами  " + ФиналПолучаемРазницуМеждуДатами  );            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }        ///////todo ФИНАЛЬНЫЙ МЕТОД КТО ВХОДИЛ ДО 7 ДНЕЙ ИЛИ ПОСЫЛАЕМ НА АУНТИФИКАЦИЮ        private void методЗапускаAsyncПоРезультатамДат(  ) {            Intent Интент_ЗапускаетBootAndAsync= new Intent();            Интент_ЗапускаетBootAndAsync.setFlags( Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);            try{//////FLAG_ACTIVITY_SINGLE_TOP                if(date_update!=null && success_users!=null  && success_login!=null  ) {                    if (ФиналПолучаемРазницуМеждуДатами < 20) {                        if (СтатусРаботыСервера == true) {                            progressbarbootandasync.setIndeterminate(true);                                // TODO: 14.08.2023  код запуска сихрнизации визуальной                                businessLogicActivityBootAndAsync.  методStartingAsynTaskLoaderForAsync( );                            Log.d(this.getClass().getName(), "  ФиналПолучаемРазницуМеждуДатами  " + ФиналПолучаемРазницуМеждуДатами                                    + " date_update " + date_update + " СтатусРаботыСервера " +СтатусРаботыСервера);                        } else {                            // TODO: 22.08.2023 clear binding                            // TODO: 28.04.2023 выключаем службу                            методUnBindingСлужбыОбновления();                          Интент_ЗапускаетBootAndAsync.setClass(getApplicationContext(), MainActivity_Dashboard.class);                            МетодСообщениеПользоватлюЧтоНЕтИнтренета("Режим: (офлайн)");                            Интент_ЗапускаетBootAndAsync.setAction("MainActivity_Dashboard.class");                            startActivity(Интент_ЗапускаетBootAndAsync);//tso                            Log.d(this.getClass().getName(), "  ФиналПолучаемРазницуМеждуДатами  " + ФиналПолучаемРазницуМеждуДатами                                    + " date_update " + date_update + " СтатусРаботыСервера " +СтатусРаботыСервера);                        }                    } else {                        // TODO: 22.08.2023 clear binding                        // TODO: 28.04.2023 выключаем службу                        методUnBindingСлужбыОбновления();                        методПереходНаActivityPassword(СтатусРаботыСервера, Интент_ЗапускаетBootAndAsync);                        Log.d(this.getClass().getName(), "  ФиналПолучаемРазницуМеждуДатами  " + ФиналПолучаемРазницуМеждуДатами                                + " date_update " + date_update + " СтатусРаботыСервера " +СтатусРаботыСервера);                    }                }else {                    // TODO: 22.08.2023 clear binding                    // TODO: 28.04.2023 выключаем службу                    методUnBindingСлужбыОбновления();                    методПереходНаActivityPassword(СтатусРаботыСервера, Интент_ЗапускаетBootAndAsync);                    Log.d(this.getClass().getName(), "  ФиналПолучаемРазницуМеждуДатами  " + ФиналПолучаемРазницуМеждуДатами                            + " date_update " + date_update + " СтатусРаботыСервера " +СтатусРаботыСервера);                }            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }        }    private void методПереходНаActivityPassword(@NonNull boolean СтатусРаботыСервера, Intent Интент_ЗапускаетFaceApp) {          try{        Интент_ЗапускаетFaceApp.setClass(getApplicationContext(), MainActivity_Tabels_Users_And_Passwords.class);        Интент_ЗапускаетFaceApp.setAction("MainActivity_Tabels_Users_And_Passwords.class");        startActivity(Интент_ЗапускаетFaceApp);//tso        finishAffinity();        Log.d(this.getClass().getName(), "  ФиналПолучаемРазницуМеждуДатами  " + ФиналПолучаемРазницуМеждуДатами                + " date_update " + date_update + " СтатусРаботыСервера " + СтатусРаботыСервера);    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    private void МетодСообщениеПользоватлюЧтоНЕтИнтренета(String КакойРежимОтоброжать) {            activity.runOnUiThread(new Runnable() {                @Override                public void run() {                    Toast toast=       Toast.makeText(getApplicationContext(),КакойРежимОтоброжать , Toast.LENGTH_LONG);                    toast.setGravity(Gravity.BOTTOM,0,40);                    toast.show();                }            });        }      // TODO: 14.08.2023  END END LogicBinessMainActivity_From_Face_Start    }////TODO END LogicBinessMainActivity_From_Face_Start   END LogicBinessMainActivity_From_Face_Start   END LogicBinessMainActivity_From_Face_Start    void методUnBindingСлужбыОбновления() {        try {            if (serviceConnectionAsync!=null) {                unbindService(serviceConnectionAsync);            }            if(connectionОбновлениеПО!=null){                unbindService(connectionОбновлениеПО);            }            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"  + " serviceConnectionAsync " +serviceConnectionAsync+                    " localBinderAsync "+ localBinderAsync + " localBinderОбновлениеПО  " +localBinderОбновлениеПО);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }}